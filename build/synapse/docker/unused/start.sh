#!/bin/sh

CONFIGURATION_DIR=/etc/synapse
CONFIGURATION_FILEPATH=$CONFIGURATION_DIR/homeserver.yaml
CONFIGURATION_SPLITDIR=$CONFIGURATION_DIR/homeserver.d
CONFIGURATION_DB_FILEPATH=$CONFIGURATION_SPLITDIR/database.yaml
CONFIGURATION_KEYS_DIR=$CONFIGURATION_DIR/keys
DATA_DIR=/var/cache/synapse

ERROR_CODE_ENVIRONMENT_VARIABLES_NOT_SET=1
ERROR_CODE_UNSUPPORTED_DATABASE_BACKEND=2
ERROR_CODE_ENVIRONMENT_VARIABLES_NOT_SET_POSTGRES=3

# This forces the reconfiguration if the first configuration
# failed midway, generating a homeserver.yaml without other
# required files

FIRST_CONFIG_LOCK_FILEPATH=$CONFIGURATION_DIR/CONFIGURED

DB_BACKEND_NAME_POSTGRESQL="postgresql"
DB_BACKEND_NAME_SQLITE="sqlite"

function synapse_is_configured() {
	[    -d "$CONFIGURATION_DIR" \
	  -a -f "$CONFIGURATION_FILEPATH" \
	  -a -d "$CONFIGURATION_KEYS_DIR" \
	  -a -f "$FIRST_CONFIG_LOCK_FILEPATH" ];
}

function strip_barebone() {
	commented_filepath="$1"
	uncommented_filepath="$2"
	grep -v '#' "$commented_filepath" | grep . > "$uncommented_filepath"
}

function write_lock_file() {
	lockfile_path="$1"
	cat << EOF > $lockfile_path
# File generated by Myy's Docker image
# If you remove this, the configuration generation tools will be
# invoked again.
# Note that Synapse configuration tools refuse to regenerate
# homeserver.yaml files when present.
EOF
}

function synapse_configure() {

	if [   -z "$SYNAPSE_SERVER_NAME" \
	    -o -z "$SYNAPSE_SERVER_ADDRESS" \
	    -o -z "$SYNAPSE_REPORT_STATS" ];
	then
		echo "In order to generate the first configuration file"
		echo "You should define the following environment variables :"
		echo "- SYNAPSE_SERVER_NAME (currently : $SYNAPSE_SERVER_NAME)"
		echo "- SYNAPSE_SERVER_ADDRESS (currently : $SYNAPSE_SERVER_ADDRESS)"
		echo "- SYNAPSE_REPORT_STATS (currently : $SYNAPSE_REPORT_STATS)"
		exit $ERROR_CODE_ENVIRONMENT_VARIABLES_NOT_SET
	fi

	mkdir -p "$CONFIGURATION_DIR"
	mkdir -p "$DATA_DIR"
	mkdir -p "$CONFIGURATION_SPLITDIR"
	mkdir -p "$CONFIGURATION_KEYS_DIR"

	echo "Executing python"
	echo "synapse.app.homeserver"
	echo "--config-dir=$CONFIGURATION_DIR"
	echo "--config-path=$CONFIGURATION_FILEPATH.sample"
	echo "--config-path=$CONFIGURATION_SPLITDIR"
	echo "--data-dir=$DATA_DIR"
	echo "--keys-dir=$CONFIGURATION_KEYS_DIR"
	echo "--report-stats=$SYNAPSE_REPORT_STATS"
	echo "--generate-config"
	echo "-H $SYNAPSE_SERVER_NAME"
	echo "--generate-keys"
	echo "--open-private-ports"

	python \
		-m synapse.app.homeserver \
		--config-dir="$CONFIGURATION_DIR" \
		--config-path="$CONFIGURATION_FILEPATH.sample" \
		--config-path="$CONFIGURATION_SPLITDIR" \
		--data-dir="$DATA_DIR" \
		--keys-dir="$CONFIGURATION_KEYS_DIR" \
		--report-stats="$SYNAPSE_REPORT_STATS" \
		--generate-config \
		-H "$SYNAPSE_SERVER_NAME" \
		--generate-keys \
		--open-private-ports

	# My shell-fu is really failing me
	if [ $? -ne 0 ]; then
		echo "Synapse failed to generate the main configuration file"
		exit 4
	fi

	strip_barebone "$CONFIGURATION_FILEPATH.sample" "$CONFIGURATION_FILEPATH"

	write_lock_file "$FIRST_CONFIG_LOCK_FILEPATH"

}

function synapse_start() {
	python \
		-m synapse.app.homeserver \
		--config-path="$CONFIGURATION_FILEPATH.sample" \
		--config-path="$CONFIGURATION_SPLITDIR" \
		--data-dir="$DATA_DIR"
}

synapse_is_configured || synapse_configure

if [ $? -eq 0 ];
then
	synapse_start;
else
	echo "Something went wrong with the configuration"
fi

# a.generate_config("/", "/", "miou", generate_secrets=True, database_conf=db_conf)
# python -m synapse.app.homeserver --config-path=/etc/matrix-synapse/homeserver.yaml --config-path=/etc/matrix-synapse/conf.d/ --generate-config

